name: Create Jira Task

on:
  issues:
    types:
      - opened
      
permissions:
  issues: write
  
env:
  USERMAP: ${{ secrets.JIRA_USERMAP }}
  ACTOR: ${{ github.actor }}
  
jobs:
  jira-sync:
    name: Create Jira Task
    runs-on: ubuntu-latest
    steps:
      - name: Login
        uses: atlassian/gajira-login@v3
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}

      - name: Checkout main code
        uses: actions/checkout@v4
        with:
          ref: main
          
      - name: Issue Parser
        uses: stefanbuck/github-issue-parser@v3
        id: issue-parser
        with:
          template-path: .github/ISSUE_TEMPLATE/issue-form.yml

      - name: Convert markdown to Jira Syntax
        uses: peter-evans/jira2md@v1
        id: md2jira
        with:
          input-text: |
            ### 깃허브 이슈 링크
            - ${{ github.event.issue.html_url }}

            ${{ steps.issue-parser.outputs.issueparser_description }}
          mode: md2jira

      - name: Extract Jira accountId from USERMAP
        id: extract
        run: |
          #!/bin/bash
          IFS=',' read -ra PAIRS <<< "$USERMAP"
          for pair in "${PAIRS[@]}"; do
            KEY="${pair%%=*}"
            VALUE="${pair#*=}"
            if [[ "$KEY" == "$ACTOR" ]]; then
              echo "account_id=$VALUE" >> $GITHUB_OUTPUT
              exit 0
            fi
          done
          echo "❌ No mapping found for $ACTOR"
          exit 1
      
      - name: Build fields JSON
        id: issue-fields
        run: |
          LABELS=$(jq -c <<< '${{ toJson(github.event.issue.labels.*.name) }}')
          DESCRIPTION=$(cat <<EOF
          ${{ steps.md2jira.outputs.output-text }}
          EOF
          )
      
          FIELDS=$(jq -n \
            --arg parent "${{ steps.issue-parser.outputs.issueparser_epicId }}" \
            --arg accountId "${{ steps.extract.outputs.account_id }}" \
            --arg duedate "${{ steps.issue-parser.outputs.issueparser_dueDate }}" \
            --arg description "$DESCRIPTION" \
            --argjson labels "$LABELS" '
            {
              parent: { key: $parent },
              assignee: { accountId: $accountId },
              description: $description
            }
            + (if $duedate != "" then { duedate: $duedate } else {} end)
            + (if (labels | length) > 0 then { labels: labels } else {} end)
          )
      
          echo "fields=$FIELDS" >> $GITHUB_OUTPUT


      - name: Create Task
        id: create
        uses: atlassian/gajira-create@v3
        with:
          project: KAN
          issuetype: Task
          summary: '${{ github.event.issue.title }}'
          description: '${{ steps.md2jira.outputs.output-text }}'
          fields: '${{ steps.issue-fields.outputs.fields }}'

      - name: Update issue title
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'update-issue'
          token: ${{ secrets.GITHUB_TOKEN }}
          title: '[${{ steps.create.outputs.issue }}] ${{ github.event.issue.title }}'

      - name: Add comment with Jira issue link
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'create-comment'
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          body: 'Jira Task Created: [${{ steps.create.outputs.issue }}](${{ secrets.JIRA_BASE_URL }}/browse/${{ steps.create.outputs.issue }})'
      
